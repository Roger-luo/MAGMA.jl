using BinaryProvider # requires BinaryProvider 0.3.0 or later

# Parse some basic command-line arguments
const verbose = "--verbose" in ARGS
const prefix = Prefix(get([a for a in ARGS if a != "--verbose"], 1, joinpath(@__DIR__, "usr")))
products = [
    LibraryProduct(prefix, ["libopenblas", "libopenblas64_"], :libopenblas),
]

# Download binaries from hosted location
#bin_prefix = "https://github.com/abelsiqueira/OpenBLASBuilder/releases/download/v0.3.0-7"
bin_prefix = "https://github.com/JuliaSmoothOptimizers/OpenBLASBuilder/releases/download/v0.3.0-7"
#bin_prefix = "https://github.com/JuliaSmoothOptimizers/OpenBLASBuilder/releases/download/v0.3.0-7"

# Listing of files generated by BinaryBuilder:
download_info = Dict(
    MacOS(:x86_64, compiler_abi=CompilerABI(:gcc4)) => ("$bin_prefix/OpenBLAS.v0.3.0.x86_64-apple-darwin14-gcc4.tar.gz", "4bd2c9f43b37b654c0c3495249abe6b79335dfac4779e5196dc756fdc1f06e97"),
    MacOS(:x86_64, compiler_abi=CompilerABI(:gcc7)) => ("$bin_prefix/OpenBLAS.v0.3.0.x86_64-apple-darwin14-gcc7.tar.gz", "53067c0de317a1d6632cb495ce187093f5b874f93ecc6773d99c1eb93d398b47"),
    MacOS(:x86_64, compiler_abi=CompilerABI(:gcc8)) => ("$bin_prefix/OpenBLAS.v0.3.0.x86_64-apple-darwin14-gcc8.tar.gz", "f794f7612cba351cf67c08dc9ca624cacc9d676bc3c49aea09c19eb71b150878"),
    Linux(:x86_64, libc=:glibc, compiler_abi=CompilerABI(:gcc4)) => ("$bin_prefix/OpenBLAS.v0.3.0.x86_64-linux-gnu-gcc4.tar.gz", "71a70b538a3c4ca72154328cc9c6ca5a11c41b2dcfb26e0265328a2d0f2197c7"),
    Linux(:x86_64, libc=:glibc, compiler_abi=CompilerABI(:gcc7)) => ("$bin_prefix/OpenBLAS.v0.3.0.x86_64-linux-gnu-gcc7.tar.gz", "0403f0331e12e0721147f0a3f586e4ffc3061ee0c4badd1c6dc4f009a2d81524"),
    Linux(:x86_64, libc=:glibc, compiler_abi=CompilerABI(:gcc8)) => ("$bin_prefix/OpenBLAS.v0.3.0.x86_64-linux-gnu-gcc8.tar.gz", "822f1d9f3d8c94d05437893d8c3db571538b0a1b5c7a77d8846b0b43ef2925a9"),
    Windows(:x86_64, compiler_abi=CompilerABI(:gcc4)) => ("$bin_prefix/OpenBLAS.v0.3.0.x86_64-w64-mingw32-gcc4.tar.gz", "8c5d6c1632c63d7140cfe1f778b1ccb901ad5dae8e1ddfd309f8db1ea5ef2664"),
    Windows(:x86_64, compiler_abi=CompilerABI(:gcc7)) => ("$bin_prefix/OpenBLAS.v0.3.0.x86_64-w64-mingw32-gcc7.tar.gz", "8f3a21846048fef965ede0daae431906bb126797ed14229e03e8add1742614ec"),
    Windows(:x86_64, compiler_abi=CompilerABI(:gcc8)) => ("$bin_prefix/OpenBLAS.v0.3.0.x86_64-w64-mingw32-gcc8.tar.gz", "6109cda1d32edc3fcb21ce4018904f98daffb2f1a1a6e2435902d84b6304432f"),
)

# Install unsatisfied or updated dependencies:
unsatisfied = any(!satisfied(p; verbose=verbose) for p in products)
dl_info = choose_download(download_info, platform_key_abi())
if dl_info === nothing && unsatisfied
    # If we don't have a compatible .tar.gz to download, complain.
    # Alternatively, you could attempt to install from a separate provider,
    # build from source or something even more ambitious here.
    error("Your platform (\"$(Sys.MACHINE)\", parsed as \"$(triplet(platform_key_abi()))\") is not supported by this package!")
end

# If we have a download, and we are unsatisfied (or the version we're
# trying to install is not itself installed) then load it up!
if unsatisfied || !isinstalled(dl_info...; prefix=prefix)
    # Download and install binaries
    install(dl_info...; prefix=prefix, force=true, verbose=verbose)
end

# Write out a deps.jl file that will contain mappings for our products
write_deps_file(joinpath(@__DIR__, "deps.jl"), products, verbose=verbose)
